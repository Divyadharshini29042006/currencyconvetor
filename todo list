React Currency Converter	Convert currencies	Updated converted currency values shown  Design and deploy a React-based web application of your choice.
a. The source code must be stored in a GitHub repository.
b. Build and run the React application in a Docker container on Docker Desktop.




 No.	System Name	Description	Expected Outcome
1	React To-Do List	Manage tasks with CRUD	Updated to-do app after commit
2	React Calculator	Basic calculator	Working calculator app
3	React Quiz App	MCQ quiz with score	Interactive quiz with scores displayed
4	React Notes App	Sticky notes	Notes visible and editable in browser
5	React Temperature Conversion	Convert between °C and °F	Correct temperature values displayed
6	React Expense Tracker	Track expenses	Expense list displayed and updated online
7	React Contact Book	Add/search contacts	Contact details added and searchable
8	React BMI Calculator	Calculate BMI	BMI value displayed correctly
9	React News App	Display news articles	Latest news feed visible online
10	React Dictionary App	Search word meanings	Word definitions displayed
11	React Currency Converter	Convert currencies	Updated converted currency values shown
12	React Recipe Finder	Search recipes	Recipe results displayed live
13	React Book Finder	Search Google Books	Book details displayed from Google Books API
14	React Form Validation	Login/signup form	Validated login and signup forms
15	React Dark/Light Theme	Theme switch	Toggle between dark and light themes
16	React Counter App	Increment/decrement	Counter increases and decreases properly
17	React Calculate Age from Birth Year	Calculate age from DOB	Correct age displayed after calculation
18	React Calendar Picker	Calendar UI	Selected date displayed properly
19	React Discount Calculator	Discount calculator	Discounted price displayed correctly
20	React Online Shopping Bill Calculator	Generate shopping bill	Final bill displayed and calculated accurately




Design and deploy a React-based web application of your choice.
a. The source code must be stored in a GitHub repository.
b. Build and run the React application in a Docker container on Docker Desktop.
c. Include the steps to create and configure an AWS EC2 server to host your
    Dockerized React application 

Problem Understanding 
(5)	AWS Infrastructure Setup procedure.
(20)	Implementation
(10)	Output

(10)	Viva
(5)	Total
(50)
					
















Skip to content
You said:
11 React Currency Converter Convert currencies Updated converted currency values shownDesign and deploy a React-based web application of your choice. a. The source code must be stored in a GitHub repository. b. Build and run the React application in a Docker container on Docker Desktop. c. Include the steps to create and configure an AWS EC2 server to host your Dockerized React application give uin detail steps
ChatGPT said:
Sure! Here's a step-by-step guide to design, develop, and deploy a React-based Currency Converter application with the following:
1.	React App Source Code in GitHub
2.	Dockerized React App
3.	Deploy on AWS EC2 Instance
________________________________________
✅ 1. Create a React Currency Converter App
1.1. Initialize React App
npx create-react-app react-currency-converter cd react-currency-converter 
1.2. Install Dependencies
Use a free API like ExchangeRate-API or exchangerate.host.
npm install axios 
1.3. Example Currency Converter Component
Create a component like CurrencyConverter.js:
import React, { useEffect, useState } from 'react'; import axios from 'axios'; function CurrencyConverter() { const [currencies, setCurrencies] = useState([]); const [fromCurrency, setFromCurrency] = useState('USD'); const [toCurrency, setToCurrency] = useState('EUR'); const [amount, setAmount] = useState(1); const [convertedAmount, setConvertedAmount] = useState(null); useEffect(() => { axios.get('https://api.exchangerate.host/latest') .then(res => { setCurrencies(Object.keys(res.data.rates)); }); }, []); useEffect(() => { if (fromCurrency && toCurrency) { axios.get(`https://api.exchangerate.host/convert?from=${fromCurrency}&to=${toCurrency}&amount=${amount}`) .then(res => { setConvertedAmount(res.data.result.toFixed(2)); }); } }, [fromCurrency, toCurrency, amount]); return ( <div> <h1>Currency Converter</h1> <input type="number" value={amount} onChange={e => setAmount(e.target.value)} /> <select value={fromCurrency} onChange={e => setFromCurrency(e.target.value)}> {currencies.map(cur => <option key={cur}>{cur}</option>)} </select> <span> to </span> <select value={toCurrency} onChange={e => setToCurrency(e.target.value)}> {currencies.map(cur => <option key={cur}>{cur}</option>)} </select> <h2>Converted Amount: {convertedAmount}</h2> </div> ); } export default CurrencyConverter; 
1.4. Use the Component in App.js
import React from 'react'; import CurrencyConverter from './CurrencyConverter'; function App() { return ( <div className="App"> <CurrencyConverter /> </div> ); } export default App; 
1.5. Test the app locally
npm start 
________________________________________
✅ 2. Push React App to GitHub
2.1. Initialize Git & Push
git init git remote add origin https://github.com/your-username/react-currency-converter.git git add . git commit -m "Initial commit" git push -u origin master 
________________________________________
✅ 3. Dockerize the React App
3.1. Create Dockerfile in root
# Use Node image FROM node:18-alpine as build # Set working directory WORKDIR /app # Copy and install dependencies COPY package*.json ./ RUN npm install # Copy the rest of the code COPY . . # Build the app RUN npm run build # Production image FROM nginx:alpine COPY --from=build /app/build /usr/share/nginx/html EXPOSE 80 CMD ["nginx", "-g", "daemon off;"] 
3.2. Create .dockerignore
node_modules
build
.dockerignore
Dockerfile
.git
.gitignore
3.3. Build and run Docker locally
docker build -t react-currency-converter . docker run -p 3000:80 react-currency-converter 
Now visit: http://localhost:3000
________________________________________
✅ 4. Deploy on AWS EC2 Instance
4.1. Launch an EC2 Instance
1.	Go to AWS EC2 Dashboard
2.	Click "Launch Instance"
3.	Set:
•	Name: ReactAppServer
•	AMI: Amazon Linux 2023 or Ubuntu 22.04
•	Instance type: t2.micro (free tier)
•	Key pair: Create or select a key pair
•	Security group: Allow HTTP (80) and SSH (22)
Launch the instance.
________________________________________
4.2. Connect to EC2 via SSH
ssh -i your-key.pem ec2-user@your-ec2-public-ip 
(Use ubuntu@ if you're on Ubuntu)
________________________________________
4.3. Install Docker on EC2
For Amazon Linux:
sudo yum update -y sudo yum install docker -y sudo service docker start sudo usermod -aG docker ec2-user 
For Ubuntu:
sudo apt update sudo apt install docker.io -y sudo systemctl start docker sudo usermod -aG docker $USER 
Then reboot:
exit 
Reconnect after 30 seconds.
________________________________________
4.4. Clone GitHub Repo on EC2
sudo yum install git -y # or `sudo apt install git -y` for Ubuntu git clone https://github.com/your-username/react-currency-converter.git cd react-currency-converter 
________________________________________
4.5. Build and Run Docker on EC2
docker build -t react-currency-converter . docker run -d -p 80:80 react-currency-converter 
________________________________________
4.6. Test the App
Visit http://<your-ec2-public-ip> in your browser — your React Currency Converter should be live!
________________________________________
✅ Summary of Files Required
Dockerfile
FROM node:18-alpine as build WORKDIR /app COPY package*.json ./ RUN npm install COPY . . RUN npm run build FROM nginx:alpine COPY --from=build /app/build /usr/share/nginx/html EXPOSE 80 CMD ["nginx", "-g", "daemon off;"] 
.dockerignore
node_modules
build
.git
________________________________________
✅ Optional Improvements
•	Add styling using Bootstrap or Material-UI
•	Add loading states / error handling
•	Host on domain via Route 53 or custom domain
________________________________________
Would you like the GitHub repo template for this or a zip file with all code?
You said:
c. Include the steps to create and configure an AWS EC2 server to host your Dockerized React application in simple words
ChatGPT said:
Sure! Here's a simple, step-by-step guide to create and configure an AWS EC2 server to host your Dockerized React app.
________________________________________
✅ Goal:

